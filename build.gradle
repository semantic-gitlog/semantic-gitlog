plugins {
    id "io.freefair.lombok" version "5.1.0"
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'pmd'
    id 'team.yi.semantic-gitlog' version '0.4.1.1'
}

group = 'team.yi.tools'
description = 'This is a library for generating a changelog with `Conventional Commits`.'
version = '0.5.0'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
generateLombokConfig.enabled = false

checkstyle.toolVersion = '8.30'
pmd.toolVersion = '6.22.0'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'team.yi.tools:semantic-commit:0.5.0'

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    api 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
    // https://mvnrepository.com/artifact/de.skuzzle/semantic-version
    api 'de.skuzzle:semantic-version:2.1.0'
    // https://mvnrepository.com/artifact/com.github.spullara.mustache.java/compiler
    api 'com.github.spullara.mustache.java:compiler:0.9.6'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    api 'com.fasterxml.jackson.core:jackson-databind:2.10.3'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.1'
}

lombok {
    version = "1.18.12"
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Checkstyle) {
    ignoreFailures = false

    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Pmd) {
    ruleSetFiles = files("${rootDir}/config/pmd/rulesets.xml")
    ruleSets = []
    ignoreFailures = false

    reports {
        xml.enabled false
        html.enabled true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/ymind/semantic-gitlog'
                inceptionYear = '2020'

                scm {
                    url = 'https://github.com/ymind/semantic-gitlog'
                    connection = 'scm:git:git@github.com:ymind/semantic-gitlog.git'
                    developerConnection = 'scm:git:git@github.com:ymind/semantic-gitlog.git'
                }

                licenses {
                    license {
                        name = "MIT"
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }

                organization {
                    name = "Yi.Team"
                    url = 'https://yi.team/'
                }

                developers {
                    developer {
                        name = "ymind"
                        email = 'ymind@yi.team'
                        url = 'https://yi.team/'
                        organization = 'Yi.Team'
                        organizationUrl = 'https://yi.team/'
                    }
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/ymind/semantic-gitlog/issues'
                }

                ciManagement {
                    system = 'Travis-CI'
                    url = 'https://travis-ci.org/ymind/semantic-gitlog'
                }
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            // def releasesRepoUrl = "https://repo.114xp.cn/repository/maven-releases/"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = "${NEXUS_USERNAME}"
                password = "${NEXUS_PASSWORD}"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

// ./gradlew setVersion -P newVersion=2.1.3
task setVersion {
    println version

    if (project.hasProperty('newVersion')) {
        println "Set Project to new Version $newVersion"

        String s = buildFile.getText().replaceFirst("version = '$version'", "version = '$newVersion'")

        buildFile.setText(s)
    }
}

changelog {
    toRef = "master"
    isUnstable = true
    preRelease = 'SNAPSHOT'
    lastVersion = '0.4.0'

    jsonFile = file("${project.rootDir}/CHANGELOG.json")
    fileSets = [
        {
            template = file("${project.rootDir}/config/gitlog/CHANGELOG.md.mustache")
            target = file("${project.rootDir}/CHANGELOG.md")
        },
        {
            template = file("${project.rootDir}/config/gitlog/CHANGELOG.zh-cn.md.mustache")
            target = file("${project.rootDir}/CHANGELOG.zh-cn.md")
        }
    ]
    commitLocales = [
        "en"   : file("${project.rootDir}/config/gitlog/commit-locales.md"),
        "zh-cn": file("${project.rootDir}/config/gitlog/commit-locales.zh-cn.md")
    ]
    scopeProfiles = [
        "en"   : file("${project.rootDir}/config/gitlog/commit-scopes.md"),
        "zh-cn": file("${project.rootDir}/config/gitlog/commit-scopes.zh-cn.md")
    ]
    issueUrlTemplate = "https://github.com/ymind/semantic-gitlog/issues/:issueId"
    commitUrlTemplate = "https://github.com/ymind/semantic-gitlog/commit/:commitId"
    mentionUrlTemplate = "https://github.com/:username"
}

derive {
    toRef = "master"
    isUnstable = true
    preRelease = 'SNAPSHOT'
    lastVersion = '0.4.0'
    derivedVersionMark = "NEXT_VERSION:=="

    commitLocales = [
        "en"   : file("${project.rootDir}/config/gitlog/commit-locales.md"),
        "zh-cn": file("${project.rootDir}/config/gitlog/commit-locales.zh-cn.md")
    ]
    scopeProfiles = [
        "en"   : file("${project.rootDir}/config/gitlog/commit-scopes.md"),
        "zh-cn": file("${project.rootDir}/config/gitlog/commit-scopes.zh-cn.md")
    ]
}
